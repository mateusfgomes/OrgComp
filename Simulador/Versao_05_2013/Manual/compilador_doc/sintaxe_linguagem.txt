Sintaxe geral da linguagem de alto nivel.

[Inclui descricao de alguns comandos].

===== Sobre este documento =====

Este documento caracteriza a sintaxe da linguagem de alto nivel e
algumas de suas funcionalidades.

Definicoes:
(fora do bloco de funcoes) indica que este comando ou declaracao deve estar escrito
somente fora de uma funcao, (dentro do bloco de funcoes) indica o contrario.

===== Operadores em expressoes =====

Esta sessao descreve todos os operadores e valores que podem ser escritos dentro
de uma <expressao>.

	.:. Operador + (soma) .:.

		<expressao> + <expressao>

	.:. Operador - (subtracao) .:.

		<expressao> - <expressao>

		OBS.: A arquitetura so aceita numeros positivos!

	.:. Operador * (multiplicacao) .:.

		<expressao> * <expressao>

		OBS.: Este operador tem precedencia sobre os operadores + e -.

	.:. Operador | (divisao) .:.

		<expressao> | <expressao>

		OBS.: Este operador tem precedencia sobre os operadores + e -.

	.:. Operador ( e ) .:.

		(<expressao>)

		OBS.: A <expressao> compreendida por estes operadores sera
		resolvida antes da expressao fora dos operadores.

	.:. Operador $ com variavel .:.

		$<nome da variavel>

		OBS.: Este operador substitui <nome da variavel> pelo valor
		que esta no endereco de memoria armazenado na variavel dada
		por <nome da variavel>, na expressao.

	.:. Operador $ com expressao .:.

		$(<expressao>)

		OBS.: Os operadores ( e ) resolverao primeiro a <expressao>
		entao o operador $ substituira o resultado de <expressao>
		pelo valor armazenado na posicao de memoria dada por este 
		resultado.

	.:. Operador & .:.

		&<nome da variavel>

		OBS.: Este operador substitui <nome da variavel> na expressao
		pelo endereco de memoria desta variavel.

	.:. Numero .:.

		<numero>

		OBS.: <numero> pode ser um valor de 0 a 65536.


	.:. Constante .:.

		<nome da constante>

		OBS.: O valor da constante sera colocado na expressao.

	.:. Variavel .:.

		<nome da variavel>

		OBS.: O valor no endereco desta variavel sera colocado na expressao.

	.:. Vetor .:.

		<nome da variavel>[<expressao>]

		OBS.: A <expressao> sera resolvida e dara a posicao do vetor.
		Entao o valor nesta posicao do vetor sera colocado na expressao.

	.:. Caractere .:.

		'<caractere>'

		OBS.: <caractere> pode ser um dos caracteres normais do teclado ou
		caracteres especiais como:

		\n : New Line (indica nova linha).
		\0 : Fim de string.
		\" : Caractere "
		\' : Caractere '
		\\ : Caractere \

	.:. Texto .:.

		"<texto>"

		OBS.: <texto> e descrito posteriormente.

		OBS.2: O <texto> sera armazenado em memoria e o endereco de memoria para
		a primeira posicao do texto estara na expressao.

		OBS.3: Alem do <texto> tambem sera armazenado o caractere '\0' (sem aspas) no final
		do texto.

===== Comparadores =====

Esta sessao descreve os operadores de comparacao que devem ser usados
em <comparador>.

	.:. Maior .:.

		>

	.:. Menor .:.

		<

	.:. Maior igual .:.

		>=

	.:. Menor igual .:.

		<=

	.:. Igual .:.

		==

	.:. Diferente .:.

		!=

===== Declaracoes de variaveis e constantes =====

	.:. Declaracao de variavel global (fora do bloco de funcoes) .:.

		short <nome da variavel>;

	.:. Declaracao de vetor global (fora do bloco de funcoes) .:.

		short <nome da variavel>[<numero>];

		OBS.: Veja "Numero" em "Operadores em expressoes" para definicao de <numero>.

		OBS.2: Se possivel sera modificado para:

		short <nome da variavel>[<numero ou constante>];

	.:. Declaracao de constante (fora do bloco de funcoes) .:.

		const <nome da constante> = <numero ou caractere>;

		OBS.: Veja "Numero" em "Operadores em expressoes" para definicao de <numero>
		e veja "Caractere" em "Operadores em expressoes" para definicao de <caractere>.

	.:. Declaracao de variavel sem atribuicao (dentro do bloco de funcoes) .:.

		short <nome da variavel>;

	.:. Declaracao de variavel vetor (dentro do bloco de funcoes) .:.

		short <nome da variavel>[<numero>];

		OBS.: Veja "Numero" em "Operadores em expressoes" para definicao de <numero>.

		OBS.2: Se possivel sera modificado para:

		short <nome da variavel>[<numero ou constante>];

	.:. Declaracao de variavel com atribuicao (dentro do bloco de funcoes) .:.

		short <nome da variavel> = <expressao>;

===== Declaracao de funcoes e uso de imports =====

	.:. Declaracao de funcao sem retorno e sem argumento (fora do bloco de funcoes) .:.

		void <nome da funcao>(void) { <comandos de "dentro do bloco de funcoes"> }

	.:. Declaracao de funcao sem retorno e com argumentos (dentro do bloco de funcoes) .:.

		void <nome da funcao>(short <nome do argumento 1>, <...>) { <comandos de "dentro do bloco de funcoes"> }

		OBS.: Onde <...> representa os demais argumentos que devem ser escritos da forma
		short <nome do argumento>
		sendo um maximo de 10 argumentos por funcao.

	.:. Declaracao de funcao com retorno e sem argumento (fora do bloco de funcoes) .:.

		short <nome da funcao>(void) { <comandos de "dentro do bloco de funcoes"> }

		OBS.1: Entre os comandos da funcao devem estar presentes ao menos um comando 'return' que define
		o valor de retorno da funcao.

	.:. Declaracao de funcao com retorno e com argumentos (fora do bloco de funcoes) .:.

		short <nome da funcao>(short <nome do argumento 1>, <...>) { <comandos de "dentro do bloco de funcoes"> }

		OBS.: Onde <...> representa os demais argumentos que devem ser escritos da forma
		short <nome do argumento>
		sendo um maximo de 10 argumentos por funcao.

		OBS.2: Entre os comandos da funcao devem estar presentes ao menos um comando 'return' que define
		o valor de retorno da funcao.

	.:. Uso de import (fora do bloco de funcoes) .:.

		import "<caminho de diretorio para o arquivo .asm a ser importado>";

===== Comandos (todos dentro do bloco de funcoes) =====

Esta sessao descreve os comandos que podem ser escritos em 
<comandos de "dentro do bloco de funcoes">.

	.:. Comando asm de um argumento .:.

		asm("<comando assembly de uma linha>");

		OBS.: <comando assembly de uma linha> nao e um <texto> e nao deve
		conter caracteres especiais.

    .:. Comando strwrt (uso nao recomendado!) .:.

		strwrt(<nome da variavel>,"<texto>");

		OBS.: A variavel indicada por <nome da variavel> deve ser um vetor ou um ponteiro
		para um espaco de memoria alocado dinamicamente onde <texto> sera armazenado.
		
		OBS.2: <texto> e descrito posteriormente.

		OBS.3: Alem do <texto> tambem sera armazenado o caractere '\0' (sem aspas) no final
		do texto.

	.:. Comando atribuicao em variavel .:.

		<nome da variavel> = <expressao>;

	.:. Comando atribuicao em posicao de memoria dada por endereco em variavel .:.

		$<nome da variavel> = <expressao>;

	.:. Comando atribuicao em posicao de memoria de vetor .:.

		<nome da variavel>[<expressao>] = <expressao>;

	.:. Comando chamada de funcao sem passagem de argumentos .:.

		<nome da funcao>();

	.:. Comando chamada de funcao com passagem de argumentos .:.

		<nome da funcao>(<expressao>,<...>);

		OBS.: O resultado de <expressao> sera atribuido no primeiro argumento
		da funcao e a funcao sera chamada. <...> indica as demais <expressao>
		para os outros argumentos. Ha no maximo 10 argumentos.

	.:. Comando desvio condicional if .:.

		if(<expressao> <comparador> <expressao>) { <comandos de "dentro do bloco de funcoes"> }

		OBS.: Se a comparacao entre ( e ) no if for verdadeira entao os <comandos de "dentro do bloco de funcoes">
		serao executados, caso contrario nao serao.

		OBS.2: Dentro dos <comandos de "dentro do bloco de funcoes"> nao pode haver nenhum tipo de
		comando asm que cause um salto (com JMPs ou BRAs) para outra regiao do codigo fora
		do { e } do if.

	.:. Comando desvio condicional repetitivo while .:.

		while(<expressao> <comparador> <expressao>) { <comandos de "dentro do bloco de funcoes"> }

		OBS.: Se a comparacao entre ( e ) do while for verdadeira entao os 
		<comandos de "dentro do bloco de funcoes"> serao executados, caso contrario nao serao.
		Se depois da execucao a comparacao ainda for verdadeira entao os <comandos de "dentro do bloco de funcoes">
		serao executados novamente e assim por diante ate a comparacao for falsa.

		OBS.2: Dentro dos <comandos de "dentro do bloco de funcoes"> nao pode haver nenhum tipo de
		comando asm que cause um salto (com JMPs ou BRAs) para outra regiao do codigo fora
		do { e } do while.

	.:. Comando return .:.

		return <expressao>;

		OBS.: Este comando nao causa o retorno de uma funcao, ele apenas define o valor de retorno
		de uma funcao com retorno.

===== Texto ===== 

Um texto deve ser um conjunto de caracteres (sem aspas simples) compreendidos todos entre aspas duplas.
Os caracteres podem ser um dos caracteres normais do teclado ou os caracteres especiais descritos em
"Caractere" em "Operadores em expressoes".
 
	
